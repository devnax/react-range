{"version":3,"file":"index.js","sources":["../src/libs/utils.js","../src/store/MetaData.js","../src/store/DataRow.js","../src/store/DataTable.js","../src/store/index.js","../src/helpers/rootStore.js","../src/helpers/useStore.js","../src/components/withStore.js","../src/components/createStore.js","../src/index.js"],"sourcesContent":["export const uid = () => Math.random().toString(36).substring(2)\r\nexport const is_object = (val, or = false) => typeof val === 'object' && val !== null && !Array.isArray(val) ? val : or\r\nexport const is_array = (val, or = false) => typeof val === 'object' && Array.isArray(val) ? val : or\r\nexport const in_array = (item, arr, or = false) => is_array(arr) && arr.indexOf(item) != -1 ? true : or\r\nexport const is_string = (val, or = false) => typeof val === 'string' ? true : or\r\nexport const is_number = (val, or = false) => typeof val === 'number' ? true : or\r\nexport const is_callback = (val, or = false) => typeof val === 'function' ? val : or\r\nexport const is_callable = (val, or = false) => typeof val === 'function' ? val : or\r\nexport const is_define = (val, or = false) => typeof val !== 'undefined' ? val : or\r\nexport const is_null = (val, or = false) => val === null ? true : or\r\n\r\n\r\n\r\n","import { is_object, is_array } from \"../libs/utils\"\r\n\r\nexport default class MetaData{\r\n    \r\n    addMeta(key, data){\r\n        this.state.meta_data[key] = this.formateRow({meta_value: data})\r\n        this.onUpdateState({key, callback: 'addMeta', type: 'meta'})\r\n    }\r\n\r\n    addMetas(metas){\r\n        if(!is_object(metas)){\r\n            return;\r\n        }\r\n        for(let key in metas){\r\n            const data = metas[key]\r\n            this.state.meta_data[key] = this.formateRow({meta_value: data})\r\n        }\r\n        this.onUpdateState({key: false, callback: 'addMetas', type: 'meta'})\r\n    }\r\n\r\n    useMeta(key, def){\r\n        return [\r\n            this.getMeta(key, def),\r\n            (value) => {\r\n                this.addMeta(key, value)\r\n            }\r\n        ]\r\n    }\r\n\r\n    getMeta(key, def){\r\n        this.onReadState({key, callback: 'getMeta', type: 'meta'})\r\n        const meta = this.state.meta_data[key]\r\n        if(meta){\r\n            return meta.meta_value\r\n        }\r\n        return def\r\n    }\r\n\r\n    getMetas(keys, def){\r\n        this.onReadState({key: false, callback: 'getMetas', type: 'meta'})\r\n\r\n        if(!is_array(keys)){\r\n            return\r\n        }\r\n        const metas = {}\r\n        for(let key of keys){\r\n            metas[key] = this.state.meta_data[key] || def\r\n        }\r\n        \r\n        return metas\r\n    }\r\n\r\n    getAllMeta(){\r\n        this.onReadState({key: false, callback: 'getAllMeta', type: 'meta'})\r\n        return this.state.meta_data\r\n    }\r\n\r\n    getMetaInfo(key){\r\n        this.onReadState({key, callback: 'getMetaInfo', type: 'meta'})\r\n        const meta = this.state.meta_data[key]\r\n        if(meta){\r\n            return meta\r\n        }\r\n    }\r\n    \r\n    observeMeta(key){\r\n        const meta = this.state.meta_data[key]\r\n        this.onReadState({key, callback: 'observeMeta', type: 'meta'})\r\n        if(meta){\r\n            return meta.observe\r\n        }\r\n        const row = this.formateRow({meta_value: ''})\r\n        return row.observe\r\n    }\r\n\r\n    deleteMeta(key){\r\n        delete this.state.meta_data[key]\r\n        this.onUpdateState({key, callback: 'deleteMeta', type: 'meta'})\r\n    }\r\n\r\n    deleteMetas(keys){\r\n        for(let key of keys){\r\n            delete this.state.meta_data[key]\r\n        }\r\n        this.onUpdateState({key: false, callback: 'deleteMetas', type: 'meta'})\r\n    }\r\n\r\n    deleteAllMeta(){\r\n        this.state.meta_data = {}\r\n        this.onUpdateState({key: false, callback: 'deleteAllMeta', type: 'meta'})\r\n    }\r\n}","import { is_array, is_callable, is_number, is_object, is_string, uid } from \"../libs/utils\";\r\nimport MetaData from './MetaData'\r\n\r\nexport default class DataRow extends MetaData{\r\n\r\n    /**\r\n     * \r\n     * @param {Object} row {\r\n     * @returns Object \r\n     */\r\n    formateRow(row){\r\n        let observe = {}\r\n        let _id   = uid()\r\n        if(row.observe){\r\n            _id = row._id\r\n            const prev_observe = row.observe()\r\n            observe = {...prev_observe, updated: Date.now()}\r\n        }else{\r\n            observe = {created: Date.now(), updated: Date.now()}\r\n\r\n        }\r\n\r\n\r\n        return {...row, _id, observe: () => observe}\r\n    }\r\n\r\n\r\n    insert(tb, row){\r\n        if(!this.hasTable(tb) || !is_object(row)) return;\r\n        row = this.formateRow(row)\r\n        this.state.data[tb].rows.push(row)\r\n        this.onUpdateState({key: tb, callback: 'insert', type: 'data'})\r\n        return row\r\n    }\r\n\r\n    insertAfter(tb, row, index){\r\n        if(!this.hasTable(tb) || !is_object(row)) return;\r\n        row = this.formateRow(row)\r\n        if(!isNaN(index) && typeof index === 'number'){\r\n            this.state.data[tb].rows.splice(parseInt(index), 0, row);\r\n        }else{\r\n            this.state.data[tb].rows.push(row)\r\n        }\r\n        this.onUpdateState({key: tb, callback: 'insertAfter', type: 'data'})\r\n        return row\r\n    }\r\n\r\n\r\n    insertMany(tb, rows){\r\n        if(!this.hasTable(tb) || !is_array(rows)) return;\r\n        const _rows = []\r\n        for(let row in rows){\r\n            row = this.formateRow(row)\r\n            this.state.data[tb].rows.push(row)\r\n            _rows.push(row)\r\n        }\r\n        this.onUpdateState({key: tb, callback: 'insertMany', type: 'data'})\r\n        return _rows\r\n    }\r\n\r\n    update(tb, row, where, cb = null){\r\n        this.query(tb, where, (prevRow) => {\r\n            if(is_callable(cb)){\r\n                prevRow = cb(prevRow)\r\n            }\r\n            const fRow = this.formateRow(prevRow) // just Update the row info\r\n            return {...fRow, ...row, _id: fRow._id}\r\n        })\r\n        this.onUpdateState({key: tb, callback: 'update', type: 'data'})\r\n    }\r\n\r\n    updateAll(tb, row, cb = null){\r\n        this.query(tb, '@', (prevRow) => {\r\n            if(is_callable(cb)){\r\n                prevRow = cb(prevRow)\r\n            }\r\n            const fRow = this.formateRow(prevRow) // just Update the row info\r\n            \r\n            return {...fRow, ...row, _id: fRow._id}\r\n        })\r\n        this.onUpdateState({key: tb, callback: 'updateAll', type: 'data'})\r\n    }\r\n\r\n    move(tb, oldIdx, newIdx){\r\n        if(!this.hasTable(tb)) return;\r\n        if(!isNaN(oldIdx) && !isNaN(newIdx) && typeof oldIdx === 'number' && typeof newIdx === 'number'){\r\n            const row = this.state.data[tb].rows[oldIdx]\r\n            if(row){\r\n                this.state.data[tb].rows.splice(oldIdx, 1);\r\n                this.state.data[tb].rows.splice(newIdx, 0, row);\r\n                this.onUpdateState({key: tb, callback: 'move', type: 'data'})\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    count(tb){\r\n        if(!this.hasTable(tb)) return;\r\n        this.onReadState({key: tb, callback: 'count', type: 'data'})\r\n        return this.state.data[tb].rows.length\r\n    }\r\n\r\n\r\n    delete(tb, where){\r\n        this.query(tb, where, () => null)\r\n        this.state.data[tb].rows = this.query(tb, '@')\r\n        this.onUpdateState({key: tb, callback: 'delete', type: 'data'})\r\n    }\r\n\r\n    get(tb, where){\r\n        if(where === undefined || where === null){\r\n            return\r\n        }\r\n        const data = this.query(tb, where)\r\n        this.onReadState({key: tb, callback: 'get', type: 'data'})\r\n        \r\n        if(data.length && is_number(where)){\r\n            return data[0]\r\n        }else if(data.length && is_string(where) && where.charAt(0) != '@'){\r\n           return data[0]\r\n        }\r\n        return data.length ? data : false\r\n    }\r\n\r\n    getIndex(tb, id){\r\n        if(!id) return;\r\n        const data = this.queryNodes(tb, id)\r\n        if(data && data.length){\r\n            this.onReadState({key: tb, callback: 'getIndex', type: 'data'})\r\n            return data[0].path[1]\r\n        }\r\n    }\r\n\r\n    getAll(tb){\r\n        this.onReadState({key: tb, callback: 'getAll', type: 'data'})\r\n        return this.query(tb, '@')\r\n    }\r\n\r\n    \r\n}","import DataRow from \"./DataRow\";\r\nimport { is_callable, is_number, is_object, is_string } from \"../libs/utils\";\r\nimport jpath from 'jsonpath'\r\n\r\nexport default class DataTable extends DataRow{\r\n\r\n    queryExpression(ex){\r\n        let _q\r\n        if(is_number(ex)){\r\n            _q = `$[${ex}]` // with index\r\n        }else if(is_string(ex)){\r\n            if(ex.charAt(0) == '@'){\r\n                _q = `$[?(${ex})]`\r\n            }else{\r\n                _q = `$[?(@._id=='${ex}')]`\r\n            }\r\n        }else if(is_object(ex)){\r\n            let _and = \"\"\r\n            let fex = ''// formate\r\n            for(let k in ex){\r\n                let v = ex[k]\r\n                if(is_string(ex[k])){\r\n                    v = `'${ex[k]}'`\r\n                }\r\n                fex += `${_and}@.${k}==${v}`\r\n                _and = '&&'\r\n            }\r\n            _q = `$[?(${fex})]`\r\n        }else{\r\n            _q = `$[?(@)]`\r\n        }\r\n        return _q\r\n    }\r\n\r\n    query(tb, jpQuery, cb = null){\r\n        try{\r\n            if(is_callable(cb)){\r\n                return jpath.apply(\r\n                    this.state.data[tb].rows, \r\n                    this.queryExpression(jpQuery),\r\n                cb)\r\n            }\r\n            return jpath.query(\r\n                this.state.data[tb].rows,\r\n                this.queryExpression(jpQuery)\r\n            )\r\n        }catch(err){\r\n            console.error(\"PARSE ERROR\")\r\n        }\r\n        \r\n    }\r\n\r\n    queryNodes(tb, jpQuery){\r\n        try{\r\n            return jpath.nodes(\r\n                this.state.data[tb].rows, \r\n                this.queryExpression(jpQuery)\r\n            )\r\n        }catch(err){\r\n            console.error(\"PARSE ERROR\")\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    updateTableInfo(tb){\r\n        if(!this.hasTable(tb)) return;\r\n        this.state.data[tb].info.updated = Date.now()\r\n        this.state.data[tb].info.length = Object.keys(this.state.data[tb].rows).length\r\n    }\r\n\r\n    /**\r\n     * creating the table to the state\r\n     * @param {string} tb table name\r\n     */\r\n    createTable(tb){\r\n        this.state.data[tb] = {\r\n            info: {\r\n                created: Date.now(),\r\n                updated: Date.now()\r\n            },\r\n            rows: []\r\n        }\r\n    }\r\n\r\n    hasTable(tb){\r\n        return this.state.data[tb] ? true : false;\r\n    }\r\n\r\n    dropTable(tb){\r\n        delete this.state.data[tb]\r\n    }\r\n\r\n    tableInfo(tb){\r\n        return this.state.data[tb].info\r\n    }\r\n\r\n    observeTable(tb){\r\n        return this.state.data[tb].info.updated\r\n    }\r\n}","import { is_callable, uid } from \"../libs/utils\";\r\nimport DataTable from './DataTable'\r\n\r\nexport default class Store extends DataTable{\r\n    storeID = \"_\"+uid()\r\n\r\n    state_info ={\r\n        created: Date.now(),\r\n        updated: Date.now(),\r\n    }\r\n\r\n    // state = {\r\n        \r\n    //     data: {\r\n    //         // table: {\r\n    //         //     info: {\r\n    //         //         tableId: \"\",\r\n    //         //         created: \"\",\r\n    //         //         updated: \"\"\r\n    //         //     },\r\n    //         //     rows: [\r\n    //         //       {\r\n    //         //          info: {}\r\n    //         //       }\r\n    //         //     ]\r\n    //         // }\r\n    //     },\r\n    //     meta_data: {},\r\n    // }\r\n\r\n\r\n    // store settings\r\n    settings  = {\r\n        tables: [],\r\n        keys: {},\r\n        methods: {},\r\n        onUpdate: () => {},\r\n        onRead: () => {}\r\n    };\r\n\r\n\r\n    /**\r\n     * These methods are initial with the table name\r\n     */\r\n    assignableTableMethods = [\r\n        {\r\n            name: 'insert$table',\r\n            method: 'insert'\r\n        },\r\n        {\r\n            name: 'insertAfter$table',\r\n            method: 'insertAfter'\r\n        },\r\n        {\r\n            name: 'insertMany$table',\r\n            method: 'insertMany'\r\n        },\r\n        {\r\n            name: 'update$table',\r\n            method: 'update'\r\n        },\r\n        {\r\n            name: 'move$table',\r\n            method: 'move'\r\n        },\r\n        {\r\n            name: 'count$table',\r\n            method: 'count'\r\n        },\r\n        {\r\n            name: 'delete$table',\r\n            method: 'delete'\r\n        },\r\n        {\r\n            name: 'get$table',\r\n            method: 'get'\r\n        },\r\n        {\r\n            name: 'getAll$table',\r\n            method: 'getAll'\r\n        },\r\n        {\r\n            name: 'get$tableIndex',\r\n            method: 'getIndex'\r\n        },\r\n        {\r\n            name: '$tableTableInfo',\r\n            method: 'tableInfo'\r\n        },\r\n        {\r\n            name: 'observe$table',\r\n            method: 'observeTable'\r\n        }\r\n    ]\r\n\r\n\r\n    constructor(settings, intialState){\r\n        super()\r\n        this.state = intialState\r\n        this.settingFormate(settings)\r\n        this.assignTables()\r\n        this.assignMethods()\r\n\r\n        this.keys = this.settings.keys\r\n        this.tables = this.settings.tables\r\n    }\r\n\r\n\r\n    /**\r\n     * Formating the settings\r\n     */\r\n    settingFormate(settings){\r\n        for(let s in this.settings){\r\n            if(settings[s]){\r\n                this.settings[s] = settings[s]\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // formating the tables\r\n    assignTables(){\r\n        const {tables} = this.settings\r\n        for(let tb of tables){\r\n            this.createTable(tb)\r\n\r\n            for(let {name, method} of this.assignableTableMethods){\r\n                name = name.replace('$table', tb)\r\n                if(!this[name]){\r\n                    this[name]  = (...args) => {\r\n                        return this[method](tb, ...args)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    assignMethods(){\r\n        const {methods} = this.settings\r\n        for(let name in methods){\r\n            if(!this[name] && is_callable(methods[name])){\r\n                this[name]  = (...args) => {\r\n                    return methods[name].apply(this, args )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * store info\r\n     * update date\r\n     */\r\n    storeInfo(){\r\n        return this.state_info\r\n    }\r\n\r\n\r\n    /**\r\n     * Call everytime when the store is update\r\n     * info is which table and which callback is working\r\n     */\r\n    onUpdateState(info){\r\n        this.state_info.updated = Date.now()\r\n        this.updateTableInfo(info.key)\r\n\r\n        const {onUpdate} = this.settings\r\n        if(is_callable(onUpdate)){\r\n            onUpdate(info)\r\n        }\r\n    }\r\n\r\n\r\n    onReadState(info){\r\n        const {onRead} = this.settings\r\n        if(is_callable(onRead)){\r\n            onRead(info)\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * getKey\r\n     * @returns read the key from the keys objec\r\n     */\r\n\r\n    getKey(name){\r\n        const {keys} = this.settings\r\n        if(keys[name]){\r\n            return keys[name]\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @returns Get The clear data state\r\n     */\r\n    getState(){\r\n        let state = {\r\n            data: {},\r\n            meta_data: this.state.meta_data\r\n        }\r\n        for(let tb in this.state.data){\r\n            // remove unnessary data\r\n            this.query(tb, '@', (row) => {\r\n                delete row.info;\r\n                delete row.isUpdate;\r\n                return row\r\n            })\r\n\r\n            state.data[tb] = this.query(tb, '@')\r\n        }\r\n\r\n        return state\r\n    }\r\n}","import Store from '../store'\r\n\r\nconst _rootStore = {\r\n    store: null,\r\n    configs: {}\r\n}\r\n\r\nexport const initialState = {\r\n    data: {},\r\n    meta_data: {}\r\n}\r\n\r\nexport const initRootStore = (configs) => {\r\n    if(_rootStore.store) return\r\n    _rootStore.configs = configs\r\n\r\n    _rootStore.store = new Store({\r\n        tables: ['Readables'],\r\n    }, initialState)\r\n}\r\n\r\n\r\nexport const getRootConfigs = () => {\r\n    return _rootStore.configs\r\n}\r\n\r\nexport const useRootStore = () => {\r\n    return _rootStore.store\r\n}\r\n\r\nexport const dispatchComponents = ({fromRoot, key, type}) => {\r\n    let readables = []\r\n    const rootStore = _rootStore.store\r\n    \r\n    \r\n    if(type === 'meta'){\r\n        if(!key){\r\n            readables = rootStore.getReadables({type: 'meta'})\r\n        }else{\r\n            readables = rootStore.getReadables({type: 'meta', key})\r\n\r\n        }\r\n    }else if(type === 'data'){\r\n        readables = rootStore.getReadables({type: 'data', key})\r\n    }\r\n\r\n    const dispatches = []\r\n    if(readables){\r\n        for(let readable of readables){\r\n            if(!dispatches.includes(readable.compId)){\r\n                if(readable.compId){\r\n                    readable.dispatch()\r\n                }\r\n                dispatches.push(readable.compId)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport const insertReadable = ({storeId, key, type, dispatch}) => {\r\n    const rootStore = _rootStore.store\r\n    const exists = rootStore.getReadables({compId: storeId, key, type})\r\n\r\n    if(!exists){\r\n        rootStore.insertReadables({\r\n            dispatch: () => dispatch(Math.random()),\r\n            compId: storeId,\r\n            key,\r\n            type\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteReadables = (storeId) => {\r\n    const rootStore = _rootStore.store\r\n    rootStore.deleteReadables({compId: storeId})\r\n}","import Store from '../store'\r\nimport {initialState, getRootConfigs, dispatchComponents} from './rootStore'\r\n\r\nconst _stack = {\r\n    store: null,\r\n    configs: {}\r\n}\r\n\r\nexport default () => {\r\n    if(_stack.store) return _stack.store\r\n\r\n    const configs = getRootConfigs()\r\n\r\n    _stack.store = new Store({\r\n        ...configs,\r\n        onUpdate: ({key, type, callback, ...rest}) => {\r\n            dispatchComponents({key, type})\r\n        },\r\n        onRead: () => {},\r\n\r\n    }, initialState)\r\n\r\n    return _stack.store\r\n}\r\n","import React, {useState, useEffect, useMemo } from 'react'\r\nimport Store from '../store'\r\nimport {initialState, getRootConfigs, insertReadable, dispatchComponents, deleteReadables} from '../helpers/rootStore'\r\nimport useStore from '../helpers/useStore'\r\nimport { is_callable } from '../libs/utils'\r\n\r\nconst Render = ({Comp, ...props}) => {\r\n    const [, dispatch] = useState(Math.random().toString())\r\n    const [store, setStore] = useState(false)\r\n    const rootConfigs = getRootConfigs()\r\n    \r\n    useEffect(() => {\r\n        let _store = store\r\n\r\n        if(!store){\r\n            _store = new Store({\r\n                ...rootConfigs,\r\n                onUpdate: ({key, type, ...rest}) => {\r\n                    if(is_callable(rootConfigs.onUpdate)){\r\n                        rootConfigs.onUpdate({key, type, ...rest})\r\n                    }\r\n                    dispatchComponents({key, type})\r\n                },\r\n                onRead: ({key, type, ...rest}) => {\r\n                    if(is_callable(rootConfigs.onRead)){\r\n                        rootConfigs.onRead({key, type, ...rest})\r\n                    }\r\n                    insertReadable({storeId: _store.storeID, key, type, dispatch})\r\n                }\r\n                \r\n            }, initialState)\r\n\r\n            setStore(_store)\r\n        }\r\n        \r\n        return () => {\r\n            deleteReadables(_store.storeID)\r\n        }\r\n    }, [])\r\n\r\n    if(!store){\r\n        return ''\r\n    }\r\n\r\n    return <Comp \r\n        {...props} \r\n        store={store}\r\n    />\r\n}\r\n\r\nexport default (Comp, resolve) => {\r\n\r\n    if(typeof resolve === 'function'){\r\n        return (props) => {\r\n            let store = useStore()\r\n            let deps  = resolve({...props, store})\r\n            deps      = deps ? deps : props\r\n            return useMemo(() => <Render {...deps} {...props} Comp={Comp} />, Object.values(deps))\r\n        }\r\n    }\r\n\r\n    return (props) => <Render {...props} Comp={Comp} />\r\n}","import React from 'react'\r\nimport { initRootStore } from '../helpers/rootStore'\r\nimport withStore from './withStore'\r\n\r\nconst createStore = (Comp, configs) => {\r\n    initRootStore(configs)\r\n\r\n    return withStore((props) => {\r\n        return <Comp {...props}/>\r\n    })\r\n}\r\n\r\nexport default createStore","import createStore from './components/createStore'\r\nimport withStore from './components/withStore'\r\nimport useStore from './helpers/useStore'\r\nimport {getRootConfigs, useRootStore} from './helpers/rootStore'\r\n\r\nimport {\r\n    uid, \r\n    is_object, \r\n    is_string, \r\n    is_array, \r\n    in_array, \r\n    is_number, \r\n    is_callback, \r\n    is_callable, \r\n    is_define, \r\n    is_null\r\n} from \"./libs/utils\";\r\n\r\nconst useConfig = () => getRootConfigs()\r\nconst storeID = () => useRootStore().storeID\r\n\r\n\r\nexport {\r\n    uid, \r\n    is_object, \r\n    is_string, \r\n    is_array, \r\n    in_array, \r\n    is_number, \r\n    is_callback, \r\n    is_callable, \r\n    is_define, \r\n    is_null,\r\n\r\n    createStore,\r\n    withStore,\r\n    useStore,\r\n    useConfig,\r\n    storeID\r\n}"],"names":["uid","Math","random","toString","substring","is_object","val","or","Array","isArray","is_array","in_array","item","arr","indexOf","is_string","is_number","is_callback","is_callable","is_define","is_null","MetaData","addMeta","key","data","state","meta_data","formateRow","meta_value","onUpdateState","callback","type","addMetas","metas","useMeta","def","getMeta","value","onReadState","meta","getMetas","keys","getAllMeta","getMetaInfo","observeMeta","observe","row","deleteMeta","deleteMetas","deleteAllMeta","DataRow","_id","prev_observe","updated","Date","now","created","insert","tb","hasTable","rows","push","insertAfter","index","isNaN","splice","parseInt","insertMany","_rows","update","where","cb","query","prevRow","fRow","updateAll","move","oldIdx","newIdx","count","length","get","undefined","charAt","getIndex","id","queryNodes","path","getAll","DataTable","queryExpression","ex","_q","_and","fex","k","v","jpQuery","jpath","apply","err","console","error","nodes","updateTableInfo","info","Object","createTable","dropTable","tableInfo","observeTable","Store","settings","intialState","storeID","state_info","tables","methods","onUpdate","onRead","assignableTableMethods","name","method","settingFormate","assignTables","assignMethods","s","replace","args","storeInfo","getKey","getState","isUpdate","_rootStore","store","configs","initialState","initRootStore","getRootConfigs","useRootStore","dispatchComponents","readables","rootStore","getReadables","dispatches","readable","includes","compId","dispatch","insertReadable","storeId","exists","insertReadables","deleteReadables","_stack","rest","Render","Comp","props","useState","setStore","rootConfigs","useEffect","_store","React","resolve","useStore","deps","useMemo","values","createStore","withStore","useConfig"],"mappings":"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"}